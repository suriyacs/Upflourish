import { fromJS } from 'immutable';

import contentAction from '../constants/ContentAction';

const initialState = fromJS({
  contentDetails: {},
  contentDetailsLoaded: false,
  loading: false,
  error: '',
  enrolledContent: {},
  completedContent: {},
  allEnrolled: {},
  relatedContent: [],
  contentList: [],
  questionType: {},
  assessmentQuestions: [],
  gamifyLearner: [],
  gamifyLearnerAssessment: []
});

const contentReducer = (state = initialState, action) => {
  switch (action.type) {
    case contentAction.FETCH_CONTENT_DETAILS:
      return state.set('loading', true)
        .set('contentDetails', {})
        .set('contentDetailsLoaded', false);
    case contentAction.FETCH_CONTENT_DETAILS_SUCCESS:
      return state
        .set('loading', false)
        .set('contentDetails', action.response)
        .set('contentDetailsLoaded', true);
    case contentAction.FETCH_CONTENT_DETAILS_ERROR:
      return state
        .set('loading', false)
        .set('error', action.error)
        .set('contentDetails', {})
        .set('contentDetailsLoaded', false);
    case contentAction.CLEAR_CONTENT_DETAILS:
      return state
        .set('contentDetails', {})
        .set('contentDetailsLoaded', false);
    case contentAction.ENROLL_CONTENT:
      return state.set('loading', true);
    case contentAction.ENROLL_CONTENT_SUCCESS:
      return state
        .set('loading', false)
        .set('enrolledContent', action.response);
    case contentAction.ENROLL_CONTENT_ERROR:
      return state
        .set('loading', false)
        .set('error', action.error);
    case contentAction.COMPLETE_CONTENT:
      return state.set('loading', true);
    case contentAction.COMPLETE_CONTENT_SUCCESS:
      return state
        .set('loading', false)
        .set('completedContent', action.response);
    case contentAction.COMPLETE_CONTENT_ERROR:
      return state
        .set('loading', false)
        .set('error', action.error);
    case contentAction.ENROLL_ALL:
      return state.set('loading', true);
    case contentAction.ENROLL_ALL_SUCCESS:
      return state
        .set('loading', false)
        .set('allEnrolled', action.response);
    case contentAction.ENROLL_ALL_ERROR:
      return state
        .set('loading', false)
        .set('error', action.error);
    case contentAction.MARK_CONTENT_COMPLETED:
      return state.set('completingContent', true);
    case contentAction.MARK_CONTENT_COMPLETED_SUCCESS:
      return state
        .set('completingContent', false)
        .set('completedContent', action.response);
    case contentAction.MARK_CONTENT_COMPLETED_ERROR:
      return state
        .set('completingContent', false)
        .set('error', action.error);
    case contentAction.FETCH_ASSESSMENT_TEST:
      return state.set('fetchingTest', true);
    case contentAction.FETCH_ASSESSMENT_TEST_SUCCESS:
      return state
        .set('fetchingTest', false)
        .set('assessmentTest', action.response);
    case contentAction.FETCH_ASSESSMENT_TEST_ERROR:
      return state
        .set('fetchingTest', false)
        .set('error', action.error);
    case contentAction.CHECK_CORRECT_ANSWER:
      return state.set('checkingAnswer', true);
    case contentAction.CHECK_CORRECT_ANSWER_SUCCESS:
      return state
        .set('checkingAnswer', false)
        .set('checkedAnswer', action.response)
        .set('learnerAssessmentAnswers', action.response);
    case contentAction.CHECK_CORRECT_ANSWER_ERROR:
      return state
        .set('checkingAnswer', false)
        .set('error', action.error);
    case contentAction.CLEAR_ASSESSMENT_DATA:
      return state
        .set('assessmentTest', {})
        .set('learnerAssessmentAnswers', {});
    case contentAction.GET_BADGE:
      return state.set('getBadge', true);
    case contentAction.GET_BADGE_SUCCESS:
      return state
        .set('getBadge', false)
        .set('badgeData', action.response);
    case contentAction.GET_BADGE_ERROR:
      return state
        .set('getBadge', false)
        .set('error', action.error);
    case contentAction.GET_RELATED_CONTENT:
      return state.set('loading', true);
    case contentAction.GET_RELATED_CONTENT_SUCCESS:
      return state
        .set('loading', false)
        .set('relatedContent', action.response);
    case contentAction.GET_RELATED_CONTENT_ERROR:
      return state
        .set('loading', false)
        .set('error', action.error)
        .set('relatedContent', []);
    case contentAction.CLEAR_COMPLETED_CONTENT:
      return state
        .set('completedContent', {})
        .set('enrolledContent', {});
    case contentAction.CLEAR_ASSESSMENT_ANSWERS:
      return state
        .set('learnerAssessmentAnswers', {})
        .set('completedContent', {})
        .set('enrolledContent', {});
    case contentAction.UPDATE_CONTENT:
    case contentAction.CREATE_CONTENT:
      return state
        .set('loading', true);
    case contentAction.CREATE_CONTENT_SUCCESS:
    case contentAction.UPDATE_CONTENT_SUCCESS:
      return state
        .set('loading', false)
        .set('contentDetails', action.response);
    case contentAction.UPDATE_CONTENT_ERROR:
    case contentAction.CREATE_CONTENT_ERROR:
      return state
        .set('loading', false);
    case contentAction.FETCH_SECTION_CONTENT_LIST:
      return state
        .set('loading', true);
    case contentAction.FETCH_SECTION_CONTENT_LIST_SUCCESS:
      return state
        .set('loading', false)
        .set('contentList', action.response);
    case contentAction.FETCH_SECTION_CONTENT_LIST_ERROR:
      return state
        .set('loading', false)
        .set('error', action.error)
        .set('contentList', []);
    case contentAction.REORDER_CONTENT_LIST:
      return state
        .set('loading', true);
    case contentAction.REORDER_CONTENT_LIST_SUCCESS:
      return state
        .set('loading', false);
    case contentAction.REORDER_CONTENT_LIST_ERROR:
      return state
        .set('loading', false);
    case contentAction.DELETE_CONTENT_LIST:
      return state
        .set('loading', false);
    case contentAction.DELETE_CONTENT_LIST_SUCCESS:
      return state
        .set('loading', false);
    case contentAction.DELETE_CONTENT_LIST_ERROR:
      return state
        .set('loading', false);
    case contentAction.GET_QUESTION_TYPE:
      return state
        .set('loading', true);
    case contentAction.GET_QUESTION_TYPE_SUCCESS:
      return state
        .set('loading', false)
        .set('questionType', action.response);
    case contentAction.GET_QUESTION_TYPE_ERROR:
      return state
        .set('loading', false)
        .set('error', action.error);
    case contentAction.UPDATE_QUESTION:
    case contentAction.SAVE_QUESTION:
      return state
        .set('loading', true);
    case contentAction.UPDATE_QUESTION_ERROR:
    case contentAction.UPDATE_QUESTION_SUCCESS:
    case contentAction.SAVE_QUESTION_ERROR:
    case contentAction.SAVE_QUESTION_SUCCESS:
      return state
        .set('loading', false);
    case contentAction.FETCH_ASSESSMENT_QUESTIONS:
      return state
        .set('loading', true);
    case contentAction.FETCH_ASSESSMENT_QUESTIONS_SUCCESS:
      return state
        .set('loading', false)
        .set('assessmentQuestions', action.response);
    case contentAction.FETCH_ASSESSMENT_QUESTIONS_ERROR:
      return state
        .set('loading', false);
    case contentAction.GAMIFY_LEARNER:
      return state
        .set('loading', true);
    case contentAction.GAMIFY_LEARNER_SUCCESS:
      return state
        .set('loading', false)
        .set('gamifyLearner', action.response);
    case contentAction.GAMIFY_LEARNER_ERROR:
      return state
        .set('loading', false);
    case contentAction.GAMIFY_LEARNER_ASSESSMENT:
      return state
        .set('loading', true);
    case contentAction.GAMIFY_LEARNER_ASSESSMENT_SUCCESS:
      return state
        .set('loading', false)
        .set('gamifyLearnerAssessment', action.response);
    case contentAction.GAMIFY_LEARNER_ASSESSMENT_ERROR:
      return state
        .set('loading', false);
    case contentAction.CLEAR_GAMIFY_LEARNER_ASSESSMENT:
      return state
        .set('gamifyLearnerAssessment', []);
    case contentAction.CREATE_RELATED_CONTENT:
      return state
        .set('loading', true);
    case contentAction.CREATE_RELATED_CONTENT_SUCCESS:
      return state
        .set('loading', false);
    case contentAction.CREATE_RELATED_CONTENT_ERROR:
      return state
        .set('loading', false);
    case contentAction.DELETE_RELATED_CONTENT:
      return state
        .set('loading', true);
    case contentAction.DELETE_RELATED_CONTENT_SUCCESS:
      return state
        .set('loading', false);
    case contentAction.DELETE_RELATED_CONTENT_ERROR:
      return state
        .set('loading', false);
    default:
      return state;
  }
};

export default contentReducer;
